# Computing still images

In this tutorial you will learn how to create the DeepDrill cover image with the DeepDrill tool chain. 

![DeepDrill Cover Image](images/cover.jpg "DeepDrill Cover Image")

It is assumed that DeepDrill has been installed successfully on your machine. The structure we will create is buried deep in the Mandelbrot set. To compute the image, we need to tell DeepDrill the location of the object. This is done by passing a location file (`.loc`) as a command line parameter. A predefined location file for the cover image is stored in the locations directory under `spider.loc`. Before we proceed, let's have a look at the contents of this file:

```
real = -2.2677664067387922388691356244792255191880358267082812585024439971401610105397724372362029456154053824622609164675371629196502594528331340581293956764916452361e-01
imag = -1.117239683936324591688558276484236515382167529582119984326546585480315896250189264406156057191817849297272681286515999107473779581849650803960450730872327827101e+00
zoom = 6.36119E152
depth = 3500000
```
Four key-value pairs are defined. The first two determine the position of the center coordinate on the complex number plane. The third pair defines the magnification factor and the fourth pair specifies the maximum number of iterations. If an orbit has not broken out by the time this iteration is performed, the corresponding point is considered to be part of the Mandelbrot set.

Assuming the current directory is DeepDrill's main directory, we can launch DeepDrill by executing the following command on the command line:
```bash
bin/deepdrill -o spider.map locations/spider.loc
```
The following output is generated: 
````none
DeepDrill 0.1 - (C)opyright 2021 Dirk W. Hoffmann

  Round 1: 518400 points
  
     Computing reference orbit: ................................. 0.02 sec
        Computing coefficients: ................................. 0.36 sec
         Checking probe points: ................................. 0.01 sec
        Computing delta orbits: ................................. 1.02 sec
               Saving map file: ................................. 0.02 sec
  
  Total time: 1.44
````
Note that we don't generate the image directly. Instead, we compute a so called map file which stores various information about the orbit of each pixel. Creating the map file is the first phase in a two-phase process. In the second phase, the map file is tranlated into an image. This phase is started by specifying a map file as input and a tiff file as output.
```bash
bin/deepdrill -o spider.tiff spider.map
```
The following output is generated: 
```none
DeepDrill 0.1 - (C)opyright 2021 Dirk W. Hoffmann

  Loading map file: ................................. 0.03 sec
        Colorizing: ................................. 0.01 sec
 Saving image data: ................................. 0.03 sec
Converting to TIFF: ................................. 0.02 sec

Total time: 0.10
```
Up to now, DeepDrill only supports tiff images, but other formats are likely to come.

By default, DeepDrill generates a 960 x 540 pixel image with a predefined color palette and other predefined standard settings. All settings can be customized by specifying one or more profiles (`.prf` files). DeepDrill comes with a number of predefined profiles, such as the high.prf profile, which generates HD quality images. Profiles are passed to DeepDrill with the `-p` option:
```bash
bin/deepdrill -v -p profiles/high.prf -o spider.tiff locations/spider.loc
```
As can be seen in this example, it is possible to go directly from a location file to a tiff image. In this case the map file is only built internally and not written to disk. Since rendering the map file is by far the most time-consuming part, saving map files to disk is the preferred method if a single map file is to be rendered multiple times, e.g. with different color palettes.	

You may also have noticed the additional `-v` option. If this option is specified, DeepDrill runs in verbose mode and prints details about the settings and the current computing run.

# Workflow automation

To simplify the workflow, DeepDrill can set up a Makefile that automates the various processing steps. To do so, we first create an empty project directory:
```bash
mkdir project
```
To set up a workflow in this directory, we start DeepDrill with option `-m`:
```bash
bin/deepdrill -m -p profiles/high.prf -o project locations/spider.loc
```
After executing the command, three files have been created in the project directory: `Makefile`, `spider.loc`, and `spider.prf`. Let's have a look at the Makefile: 
```Make
# Generated by DeepDrill 0.1

DEEPDRILL = bin/deepdrill
	
.PHONY: all clean
	
all: spider.tiff
	
spider.tiff: spider.map
    $(DEEPDRILL) -v  -p spider.prf -o spider.tiff spider.map 
	
spider.map: spider.loc
    $(DEEPDRILL) -v  -p spider.prf -o spider.map spider.loc 
	
clean:
    rm *.map *.tiff
```
The Makefile defines two major goals: One to create the map file from the location file and another to convert the map file to an image. To create the image, change to the project directory and run the Make utility:
```bash
cd project
make
```
Admittedly, workflow automation is of limited use when creating still images, since such images can be calculated by issuing a single shell command. However, the feature will become invaluable once DeepDrill gains support for creating zoom videos. In this case, a cascade of images will have to be computed and assembled in the right way. However, this functionality is yet to come.
